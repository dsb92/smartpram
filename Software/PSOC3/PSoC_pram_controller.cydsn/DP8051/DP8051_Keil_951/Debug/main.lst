C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\main.lst) CD DB NOIP OT(2,SIZE) INCDIR(.,.\Gener
                    -ated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\main.obj)

line level    source

   1          /* ========================================
   2           * PRJ3 - Gruppe 8
   3           * Authors: 
   4           *          - Jonas Ulleberg Jussila
   5           *          - Mads Gad Krogsgaard
   6           * ========================================
   7          */
   8          
   9          /*******************************************************************************
  10          * Includes and Defines
  11          *******************************************************************************/
  12          #include <device.h>
  13          #include <math.h>
  14          #include <stdio.h>
  15          #include "zigbee_driver.h"
  16          #include "Functions.h"
  17          #define n 1
  18          #define N_Sample 9
  19          #define SOUND_SIZE 20
  20          #define ZIG_ARR_SEND_SIZE 2
  21          #define ZIG_ARR_RECEIVE_SIZE 2
  22          
  23          /*******************************************************************************
  24          * Global Variables
  25          *******************************************************************************/
  26          
  27          enum Inputs
  28          {
  29                  TEMPERATURE = 0,
  30                  SOUND = 1
  31          };
  32          
  33          int16   V_Sample[n];
  34          int16   V_Sample_MIN=0;
  35          int16   V_Sample_MAX=0;
  36          float   V_Sample_PP_float=0;
  37          uint16  i=0;
  38          
  39          uint8 phase = 1;        // Contains the current phase of which the program is in
  40          uint8 shutDownCounter = 0;      // "Shuts down" Psoc if this reaches some value
  41          uint8 cradleSpeed = 0;  // Container for speed to be sent to cradle motor
  42          uint8 mobileSpeed = 0;  // Container for speed to be sent to mobile motor
  43          float soundArray[ SOUND_SIZE ]; // Container for peak-to-peak samples to be analyzed
  44          uint8 soundCounter = 0;         // Counter for work on the soundArray
  45          
  46          int8 zigSendArr[ ZIG_ARR_SEND_SIZE ];   // Array to be sent to ZigBee
  47          int8 soundResult; // Result of sound analysis, ready for sending to zigSendArr.
  48          int8 tempResult = 66;   // Value from ADC is converted into a value in degrees celcius
  49          int16 tempIn = 0;               // Temperature value read from ADC
  50          
  51          //Zigbee settings
  52          //Destination
  53          uint8 PANID_A[2] = {0x11, 0x22}; //desination ID (DEVKIT I STEDER FOR A)
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 2   

  54          uint8 SHORTADR_A[2] = {0x33, 0x44};
  55          //Source (itself)
  56          uint8 PANID_B[2] = {0xBB, 0xCC}; //Zigbee ID (PSOC I STEDER FOR B)
  57          uint8 SHORTADR_B[2] = {0xDD, 0xEE};
  58          
  59          /*******************************************************************************
  60          * Functions for DMA configuration
  61          *******************************************************************************/
  62          
  63          void DMA_1_Config()
  64          {
  65   1              // Variable declarations for DMA_1 
  66   1              // Move these variable declarations to the top of the function 
  67   1              uint8 DMA_1_Chan;
  68   1              uint8 DMA_1_TD[1];
  69   1      
  70   1              // DMA Configuration for DMA_1
  71   1              #define DMA_1_BYTES_PER_BURST 2
  72   1              #define DMA_1_REQUEST_PER_BURST 1
  73   1              #define DMA_1_SRC_BASE (CYDEV_PERIPH_BASE)
  74   1              #define DMA_1_DST_BASE (CYDEV_PERIPH_BASE)
  75   1              DMA_1_Chan = DMA_1_DmaInitialize(DMA_1_BYTES_PER_BURST, DMA_1_REQUEST_PER_BURST, HI16(DMA_1_SRC_BASE), HI
             -16(DMA_1_DST_BASE));
  76   1              DMA_1_TD[0] = CyDmaTdAllocate();
  77   1              CyDmaTdSetConfiguration(DMA_1_TD[0], 2, DMA_INVALID_TD, TD_INC_DST_ADR);
  78   1              CyDmaTdSetAddress(DMA_1_TD[0], LO16((uint32)ADC_DelSig_1_DEC_SAMP_PTR), LO16((uint32)Filter_1_STAGEAM_PTR
             -));
  79   1              CyDmaChSetInitialTd(DMA_1_Chan, DMA_1_TD[0]);
  80   1              CyDmaChEnable(DMA_1_Chan, 1);
  81   1      }
  82          
  83          void DMA_2_Config()
  84          {
  85   1              // Variable declarations for DMA_2
  86   1              // Move these variable declarations to the top of the function
  87   1              uint8 DMA_2_Chan;
  88   1              uint8 DMA_2_TD[1];
  89   1      
  90   1              // DMA Configuration for DMA_2
  91   1              #define DMA_2_BYTES_PER_BURST 2
  92   1              #define DMA_2_REQUEST_PER_BURST 1
  93   1              #define DMA_2_SRC_BASE (CYDEV_PERIPH_BASE)
  94   1              #define DMA_2_DST_BASE (CYDEV_SRAM_BASE)
  95   1              DMA_2_Chan = DMA_2_DmaInitialize(DMA_2_BYTES_PER_BURST, DMA_2_REQUEST_PER_BURST, HI16(DMA_2_SRC_BASE), HI
             -16(DMA_2_DST_BASE));
  96   1              DMA_2_TD[0] = CyDmaTdAllocate();
  97   1              CyDmaTdSetConfiguration(DMA_2_TD[0], n*2, DMA_INVALID_TD, TD_SWAP_EN | DMA_2__TD_TERMOUT_EN | TD_INC_SRC_
             -ADR | TD_INC_DST_ADR);
  98   1              CyDmaTdSetAddress(DMA_2_TD[0], LO16((uint32)Filter_1_HOLDAM_PTR), LO16((uint32)V_Sample));
  99   1              CyDmaChSetInitialTd(DMA_2_Chan, DMA_2_TD[0]);
 100   1              CyDmaChEnable(DMA_2_Chan, 1);
 101   1      }
 102          
 103          /*******************************************************************************
 104          * Interrupt Service Routines
 105          *******************************************************************************/
 106          
 107          CY_ISR( DAC_int )
 108          {
 109   1              VDAC8_1_Data = ((int8)(V_Sample[0] >> 8))+128; //128 = 0x80
 110   1      }
 111          
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 3   

 112          CY_ISR( Sample_int )
 113          {
 114   1              Control_Reg_1_Control=0;
 115   1              if(V_Sample[0]<V_Sample_MIN)V_Sample_MIN=V_Sample[0];
 116   1              if(V_Sample[0]>V_Sample_MAX)V_Sample_MAX=V_Sample[0];
 117   1      }
 118          
 119          CY_ISR( ISR_zigbee ){
 120   1              uint8 stat_IRQ; // Container for the status of the IRQ
 121   1              uint8 dataReceived[ ZIG_ARR_RECEIVE_SIZE ];     // Container to store the received data
 122   1              uint8 lenghtOfData;     // Holds the lenght (in bytes) of the data received.
 123   1              
 124   1              stat_IRQ = zigbee_status_IRQ(); // Interrupt status
 125   1              
 126   1              if( (stat_IRQ & 0x08) > 0  ){ // If data received
 127   2                      lenghtOfData = zigbee_read_payload_RXfifo( dataReceived );      
 128   2                      
 129   2                      mobileSpeed = dataReceived[0];  // Extract the PWM values from the received
 130   2                      cradleSpeed = dataReceived[1];  // data and save in local variables
 131   2                      PWM_1_WriteCompare1( cradleSpeed );     // Set new PWM value for cradle motor
 132   2                      PWM_1_WriteCompare2( mobileSpeed );     // Set new PWM value for mobile motor
 133   2                      
 134   2                      shutDownCounter = 0;    // Reset counter for hibernation
 135   2              }
 136   1          IRQ_Zigbee_ClearInterrupt();        // Clears pins IRQ
 137   1      }
 138          
 139          /*******************************************************************************
 140          * Function for starting ZigBee
 141          *******************************************************************************/
 142          
 143          void zigbee_start() //Zigbee init
 144          {
 145   1              zigbee_reset();
 146   1              zigbee_init();
 147   1              zigbee_set_ch(22); // channels range from 11-26
 148   1              zigbee_set_TXpower(31); //max 31
 149   1              zigbee_source_PANid(PANID_B);
 150   1              zigbee_source_shortadr(SHORTADR_B);
 151   1              zigbee_destination_PANid(PANID_A);
 152   1              zigbee_destination_shortadr(SHORTADR_A);
 153   1      }
 154          
 155          
 156          /*******************************************************************************
 157          * Function for initialization
 158          *******************************************************************************/
 159          
 160          void Init()
 161          {  
 162   1              // Component startups
 163   1              PWM_1_Start();
 164   1              AMux_1_Init();
 165   1              Opamp_1_Start();
 166   1              PGA_1_Start();
 167   1              ADC_DelSig_1_Start();
 168   1              ADC_DelSig_1_StartConvert();
 169   1              VDAC8_1_Start();
 170   1              SPI_Start();
 171   1              DMA_1_Config();
 172   1              DMA_2_Config();
 173   1              Filter_1_Start();
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 4   

 174   1              Filter_1_SetCoherency(Filter_1_CHANNEL_A, Filter_1_KEY_HIGH);
 175   1              Control_Reg_1_Control=0;
 176   1              zigbee_start(); // Zigbee init
 177   1              
 178   1              // ISRs
 179   1              isr_Receive_Data_StartEx(ISR_zigbee);
 180   1              isr_1_StartEx(DAC_int);
 181   1              isr_2_StartEx(Sample_int);
 182   1              
 183   1              // Enable Global Interrupts
 184   1              CyGlobalIntEnable;
 185   1      }
 186          
 187          
 188          /*******************************************************************************
 189          * Main Function
 190          *******************************************************************************/
 191          
 192          void main()
 193          {
 194   1              Init();
 195   1              
 196   1              // Set default MUX input to microphone
 197   1              AMux_1_FastSelect( SOUND );
 198   1              
 199   1              // Initialize motors to 0 speed
 200   1              cradleSpeed = 0;
 201   1              mobileSpeed = 0;
 202   1              PWM_1_WriteCompare1( cradleSpeed );
 203   1              PWM_1_WriteCompare2( mobileSpeed );
 204   1              
 205   1          for(;;)
 206   1          {
 207   2                      /***************************************************************************
 208   2                      * PHASE 1:
 209   2                      * Gathers peak-to-peak values from microphone for 5 seconds.
 210   2                      * Represented by 20 measurements per second, so 100 total for the 5 seconds.
 211   2                      * When 5 seconds are recorded in soundArray, move to phase 2.
 212   2                      ***************************************************************************/
 213   2                      while( phase == 1 )
 214   2                      {
 215   3                              V_Sample_MIN= ((1<<15)-1) ; // int: ((1<<15)-1) uint: 0-1 
 216   3                              V_Sample_MAX=1 << 15;       // int: 1<<15       uint: 0
 217   3                              for(i=0;i<(1 << (N_Sample));i++)
 218   3                              {
 219   4                                      Control_Reg_1_Control=1;
 220   4                                      while(Control_Reg_1_Control); 
 221   4                              }
 222   3                      
 223   3                              // Calculate peak-to-peak value
 224   3                              V_Sample_PP_float = ADC_DelSig_1_CountsTo_Volts((((int32)V_Sample_MAX)-((int32)V_Sample_MIN)));
 225   3                              
 226   3                              // Save value in array and increment counter
 227   3                              soundArray[soundCounter] = V_Sample_PP_float;
 228   3                              soundCounter++;
 229   3                              
 230   3                              // When array is full, move on to phase 2
 231   3                              if( soundCounter >= SOUND_SIZE )
 232   3                              {
 233   4                                      phase = 2;
 234   4                                      soundCounter = 0;       // Reset soundCounter for next 1 sec measurement
 235   4                              }
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 5   

 236   3                      }
 237   2      
 238   2                      /**********************************************************************
 239   2                      * PHASE 2:
 240   2                      * 
 241   2                      * - Changes the MUX to the temperature channel, 
 242   2                      * - Reads and saves data from ADC,
 243   2                      * - Changes MUX back to the mic channel
 244   2                      **********************************************************************/
 245   2                      while( phase == 2 )
 246   2                      {       
 247   3                              AMux_1_FastSelect( TEMPERATURE );       // Change MUX channel to temperature
 248   3                              
 249   3                              // Delay, to make time for some measurement to be taken
 250   3                              // before reading the value from the ADC
 251   3                              CyDelay(5);
 252   3                              
 253   3                              // Read temperature and save in temperatureResult
 254   3                              tempIn = ADC_DelSig_1_GetResult16();
 255   3                              tempResult = analyzeTemp( tempIn ); // Convert to degrees celcius
 256   3                                              
 257   3                              AMux_1_FastSelect( SOUND );     // Change MUX channel back to microphone        
 258   3                              phase = 3;      // Move on to phase 3
 259   3                      }
 260   2      
 261   2                      /*********************************************************
 262   2                      * PHASE 3:
 263   2                      * - Analyze soundArray
 264   2                      * - Send saved soundResult and temperatureResult to DevKit
 265   2                      * - Go back to phase 1
 266   2                      *********************************************************/
 267   2                      while( phase == 3 )
 268   2                      {                       
 269   3                              /**************************************
 270   3                              * Analyze soundArray and (print result)
 271   3                              **************************************/
 272   3                              soundResult = analyzeSound( soundArray, SOUND_SIZE );
 273   3      
 274   3                              
 275   3                              /************************************************
 276   3                              * Send values to DevKit through the ZigBee module
 277   3                              ************************************************/
 278   3                              zigSendArr[ TEMPERATURE ] = tempResult;
 279   3                              zigSendArr[ SOUND ] = soundResult;
 280   3                              
 281   3                              zigbee_write_payload_TXfifo( zigSendArr, ZIG_ARR_SEND_SIZE );
 282   3                              zigbee_transmit_TXfifo();
 283   3                               
 284   3                              shutDownCounter++;  // Add 1 sec (approximately) to counter
 285   3                              phase = 1;      // Go back to phase one (will go to phase 4 instead, if shutDownCounter is too high)
 286   3                      }
 287   2                      
 288   2                      /*******************************************************
 289   2                      * PHASE 4:
 290   2                      * - Turn off both motors
 291   2                      * - Wait here until new signal is received from DevKit 
 292   2                      *   (this is when shutDownCounter is reset in ZigBee ISR)
 293   2                      ********************************************************/
 294   2                      
 295   2                      // Phase 4 is determined by: 
 296   2                      // - phase == 1 (meaning the previous round in the for(;;) is complete)
 297   2                      // - combined with shutDownCounter getting too high (meaning we did not receive a signal
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 6   

 298   2                      //   from the DevKit for some ammount of time.)
 299   2                      while( (phase == 1) && (shutDownCounter >= 10) )
 300   2                      {
 301   3                              // SHUT DOWN SYSTEMS
 302   3                              cradleSpeed = 0;
 303   3                              mobileSpeed = 0;
 304   3                              PWM_1_WriteCompare1( cradleSpeed );
 305   3                              PWM_1_WriteCompare2( mobileSpeed );
 306   3                              
 307   3                              // Maybe put PSOC in hibernation mode
 308   3                              
 309   3                              // Wait..
 310   3                      } // End while
 311   2      
 312   2              } // End for(;;)
 313   1              
 314   1      } // End main()
 315          
 316          
 317          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION DMA_1_Config (BEGIN)
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 75
0000 900000      E     MOV     DPTR,#?_DMA_1_DmaInitialize?BYTE+04H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
0008 7B00              MOV     R3,#00H
000A 7A00              MOV     R2,#00H
000C 7D01              MOV     R5,#01H
000E 7F02              MOV     R7,#02H
0010 120000      E     LCALL   _DMA_1_DmaInitialize
0013 900000      R     MOV     DPTR,#DMA_1_Chan
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0018 120000      E     LCALL   CyDmaTdAllocate
001B 900000      R     MOV     DPTR,#DMA_1_TD
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0020 900000      R     MOV     DPTR,#DMA_1_TD
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
0028 7402              MOV     A,#02H
002A F0                MOVX    @DPTR,A
002B 7BFF              MOV     R3,#0FFH
002D 7D02              MOV     R5,#02H
002F 7C00              MOV     R4,#00H
0031 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 78
0034 900000      R     MOV     DPTR,#DMA_1_TD
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 7BA1              MOV     R3,#0A1H
003B 7AC7              MOV     R2,#0C7H
003D 7D10              MOV     R5,#010H
003F 7C4E              MOV     R4,#04EH
0041 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 79
0044 900000      R     MOV     DPTR,#DMA_1_Chan
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 900000      R     MOV     DPTR,#DMA_1_TD
004C E0                MOVX    A,@DPTR
004D FD                MOV     R5,A
004E 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 80
0051 900000      R     MOV     DPTR,#DMA_1_Chan
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 7D01              MOV     R5,#01H
0058 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 81
005B 22                RET     
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 8   

             ; FUNCTION DMA_1_Config (END)

             ; FUNCTION DMA_2_Config (BEGIN)
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 95
0000 900000      E     MOV     DPTR,#?_DMA_2_DmaInitialize?BYTE+04H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 E4                CLR     A
0007 F0                MOVX    @DPTR,A
0008 7B00              MOV     R3,#00H
000A 7A00              MOV     R2,#00H
000C 7D01              MOV     R5,#01H
000E 7F02              MOV     R7,#02H
0010 120000      E     LCALL   _DMA_2_DmaInitialize
0013 900000      R     MOV     DPTR,#DMA_2_Chan
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0018 120000      E     LCALL   CyDmaTdAllocate
001B 900000      R     MOV     DPTR,#DMA_2_TD
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
0020 900000      R     MOV     DPTR,#DMA_2_TD
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
0028 7487              MOV     A,#087H
002A F0                MOVX    @DPTR,A
002B 7BFF              MOV     R3,#0FFH
002D 7D02              MOV     R5,#02H
002F 7C00              MOV     R4,#00H
0031 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 98
0034 900000      R     MOV     DPTR,#DMA_2_TD
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 C007              PUSH    AR7
003B 7B01              MOV     R3,#01H
003D 7A00        R     MOV     R2,#HIGH V_Sample
003F 7900        R     MOV     R1,#LOW V_Sample
0041 AF01              MOV     R7,AR1
0043 AE02              MOV     R6,AR2
0045 AD03              MOV     R5,AR3
0047 7C00              MOV     R4,#00H
0049 EF                MOV     A,R7
004A 54FF              ANL     A,#0FFH
004C FF                MOV     R7,A
004D EE                MOV     A,R6
004E 54FF              ANL     A,#0FFH
0050 FE                MOV     R6,A
0051 ED                MOV     A,R5
0052 5400              ANL     A,#00H
0054 FD                MOV     R5,A
0055 EC                MOV     A,R4
0056 5400              ANL     A,#00H
0058 FC                MOV     R4,A
0059 AB07              MOV     R3,AR7
005B AA06              MOV     R2,AR6
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 9   

005D D007              POP     AR7
005F 7DA9              MOV     R5,#0A9H
0061 7CC7              MOV     R4,#0C7H
0063 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 99
0066 900000      R     MOV     DPTR,#DMA_2_Chan
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B 900000      R     MOV     DPTR,#DMA_2_TD
006E E0                MOVX    A,@DPTR
006F FD                MOV     R5,A
0070 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 100
0073 900000      R     MOV     DPTR,#DMA_2_Chan
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 7D01              MOV     R5,#01H
007A 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 101
007D 22                RET     
             ; FUNCTION DMA_2_Config (END)

             ; FUNCTION DAC_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 109
001D 900000      R     MOV     DPTR,#V_Sample
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EE                MOV     A,R6
0026 FF                MOV     R7,A
0027 33                RLC     A
0028 95E0              SUBB    A,ACC
002A FE                MOV     R6,A
002B EF                MOV     A,R7
002C 2480              ADD     A,#080H
002E FF                MOV     R7,A
002F 905B82            MOV     DPTR,#05B82H
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0034 D007              POP     AR7
0036 D006              POP     AR6
0038 D0D0              POP     PSW
003A D000        E     POP     ?C?XPAGE1SFR
003C D086              POP     DPS
003E D084              POP     DPL1
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 10  

0040 D085              POP     DPH1
0042 D082              POP     DPL
0044 D083              POP     DPH
0046 D0E0              POP     ACC
0048 32                RETI    
             ; FUNCTION DAC_int (END)

             ; FUNCTION Sample_int (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C000              PUSH    AR0
001B C004              PUSH    AR4
001D C005              PUSH    AR5
001F C006              PUSH    AR6
0021 C007              PUSH    AR7
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 114
0023 906471            MOV     DPTR,#06471H
0026 E4                CLR     A
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0028 900000      R     MOV     DPTR,#V_Sample_MIN
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#V_Sample
0033 E0                MOVX    A,@DPTR
0034 FC                MOV     R4,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FD                MOV     R5,A
0038 C3                CLR     C
0039 ED                MOV     A,R5
003A 9F                SUBB    A,R7
003B EE                MOV     A,R6
003C 6480              XRL     A,#080H
003E F8                MOV     R0,A
003F EC                MOV     A,R4
0040 6480              XRL     A,#080H
0042 98                SUBB    A,R0
0043 5010              JNC     ?C0004
0045 900000      R     MOV     DPTR,#V_Sample
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 900000      R     MOV     DPTR,#V_Sample_MIN
0050 EE                MOV     A,R6
0051 F0                MOVX    @DPTR,A
0052 A3                INC     DPTR
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 11  

0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
0055         ?C0004:
                                           ; SOURCE LINE # 116
0055 900000      R     MOV     DPTR,#V_Sample_MAX
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 900000      R     MOV     DPTR,#V_Sample
0060 E0                MOVX    A,@DPTR
0061 FC                MOV     R4,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FD                MOV     R5,A
0065 D3                SETB    C
0066 ED                MOV     A,R5
0067 9F                SUBB    A,R7
0068 EE                MOV     A,R6
0069 6480              XRL     A,#080H
006B F8                MOV     R0,A
006C EC                MOV     A,R4
006D 6480              XRL     A,#080H
006F 98                SUBB    A,R0
0070 4010              JC      ?C0006
0072 900000      R     MOV     DPTR,#V_Sample
0075 E0                MOVX    A,@DPTR
0076 FE                MOV     R6,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A 900000      R     MOV     DPTR,#V_Sample_MAX
007D EE                MOV     A,R6
007E F0                MOVX    @DPTR,A
007F A3                INC     DPTR
0080 EF                MOV     A,R7
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
0082         ?C0006:
0082 D007              POP     AR7
0084 D006              POP     AR6
0086 D005              POP     AR5
0088 D004              POP     AR4
008A D000              POP     AR0
008C D0D0              POP     PSW
008E D000        E     POP     ?C?XPAGE1SFR
0090 D086              POP     DPS
0092 D084              POP     DPL1
0094 D085              POP     DPH1
0096 D082              POP     DPL
0098 D083              POP     DPH
009A D0E0              POP     ACC
009C 32                RETI    
             ; FUNCTION Sample_int (END)

             ; FUNCTION ISR_zigbee (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 12  

000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 124
002B 120000      E     LCALL   zigbee_status_IRQ
002E 900000      R     MOV     DPTR,#stat_IRQ
0031 EF                MOV     A,R7
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0033 900000      R     MOV     DPTR,#stat_IRQ
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 EF                MOV     A,R7
0039 5408              ANL     A,#08H
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D D3                SETB    C
003E 9400              SUBB    A,#00H
0040 4037              JC      ?C0007
                                           ; SOURCE LINE # 127
0042 7B01              MOV     R3,#01H
0044 7A00        R     MOV     R2,#HIGH dataReceived
0046 7900        R     MOV     R1,#LOW dataReceived
0048 120000      E     LCALL   _zigbee_read_payload_RXfifo
004B 900000      R     MOV     DPTR,#lenghtOfData
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0050 900000      R     MOV     DPTR,#dataReceived
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#mobileSpeed
0058 EF                MOV     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
005A 900000      R     MOV     DPTR,#dataReceived+01H
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F 900000      R     MOV     DPTR,#cradleSpeed
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
0064 900000      R     MOV     DPTR,#cradleSpeed
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 120000      E     LCALL   _PWM_1_WriteCompare1
                                           ; SOURCE LINE # 132
006C 900000      R     MOV     DPTR,#mobileSpeed
006F E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 13  

0070 FF                MOV     R7,A
0071 120000      E     LCALL   _PWM_1_WriteCompare2
                                           ; SOURCE LINE # 134
0074 900000      R     MOV     DPTR,#shutDownCounter
0077 E4                CLR     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0079         ?C0007:
                                           ; SOURCE LINE # 136
0079 120000      E     LCALL   IRQ_Zigbee_ClearInterrupt
                                           ; SOURCE LINE # 137
007C D007              POP     AR7
007E D006              POP     AR6
0080 D005              POP     AR5
0082 D004              POP     AR4
0084 D003              POP     AR3
0086 D002              POP     AR2
0088 D001              POP     AR1
008A D000              POP     AR0
008C D0D0              POP     PSW
008E D000        E     POP     ?C?XPAGE1SFR
0090 D086              POP     DPS
0092 D084              POP     DPL1
0094 D085              POP     DPH1
0096 D082              POP     DPL
0098 D083              POP     DPH
009A D0F0              POP     B
009C D0E0              POP     ACC
009E 32                RETI    
             ; FUNCTION ISR_zigbee (END)

             ; FUNCTION zigbee_start (BEGIN)
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
0000 120000      E     LCALL   zigbee_reset
                                           ; SOURCE LINE # 146
0003 120000      E     LCALL   zigbee_init
                                           ; SOURCE LINE # 147
0006 7F16              MOV     R7,#016H
0008 120000      E     LCALL   _zigbee_set_ch
                                           ; SOURCE LINE # 148
000B 7F1F              MOV     R7,#01FH
000D 120000      E     LCALL   _zigbee_set_TXpower
                                           ; SOURCE LINE # 149
0010 7B01              MOV     R3,#01H
0012 7A00        R     MOV     R2,#HIGH PANID_B
0014 7900        R     MOV     R1,#LOW PANID_B
0016 120000      E     LCALL   _zigbee_source_PANid
                                           ; SOURCE LINE # 150
0019 7B01              MOV     R3,#01H
001B 7A00        R     MOV     R2,#HIGH SHORTADR_B
001D 7900        R     MOV     R1,#LOW SHORTADR_B
001F 120000      E     LCALL   _zigbee_source_shortadr
                                           ; SOURCE LINE # 151
0022 7B01              MOV     R3,#01H
0024 7A00        R     MOV     R2,#HIGH PANID_A
0026 7900        R     MOV     R1,#LOW PANID_A
0028 120000      E     LCALL   _zigbee_destination_PANid
                                           ; SOURCE LINE # 152
002B 7B01              MOV     R3,#01H
002D 7A00        R     MOV     R2,#HIGH SHORTADR_A
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 14  

002F 7900        R     MOV     R1,#LOW SHORTADR_A
0031 120000      E     LCALL   _zigbee_destination_shortadr
                                           ; SOURCE LINE # 153
0034 22                RET     
             ; FUNCTION zigbee_start (END)

             ; FUNCTION Init (BEGIN)
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 163
0000 120000      E     LCALL   PWM_1_Start
                                           ; SOURCE LINE # 164
0003 120000      E     LCALL   AMux_1_Start
                                           ; SOURCE LINE # 165
0006 120000      E     LCALL   Opamp_1_Start
                                           ; SOURCE LINE # 166
0009 120000      E     LCALL   PGA_1_Start
                                           ; SOURCE LINE # 167
000C 120000      E     LCALL   ADC_DelSig_1_Start
                                           ; SOURCE LINE # 168
000F 120000      E     LCALL   ADC_DelSig_1_StartConvert
                                           ; SOURCE LINE # 169
0012 120000      E     LCALL   VDAC8_1_Start
                                           ; SOURCE LINE # 170
0015 120000      E     LCALL   SPI_Start
                                           ; SOURCE LINE # 171
0018 120000      R     LCALL   DMA_1_Config
                                           ; SOURCE LINE # 172
001B 120000      R     LCALL   DMA_2_Config
                                           ; SOURCE LINE # 173
001E 120000      E     LCALL   Filter_1_Start
                                           ; SOURCE LINE # 174
0021 7D02              MOV     R5,#02H
0023 7F00              MOV     R7,#00H
0025 120000      E     LCALL   _Filter_1_SetCoherency
                                           ; SOURCE LINE # 175
0028 906471            MOV     DPTR,#06471H
002B E4                CLR     A
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
002D 120000      R     LCALL   zigbee_start
                                           ; SOURCE LINE # 179
0030 7E00        R     MOV     R6,#HIGH ISR_zigbee
0032 7F00        R     MOV     R7,#LOW ISR_zigbee
0034 120000      E     LCALL   _isr_Receive_Data_StartEx
                                           ; SOURCE LINE # 180
0037 7E00        R     MOV     R6,#HIGH DAC_int
0039 7F00        R     MOV     R7,#LOW DAC_int
003B 120000      E     LCALL   _isr_1_StartEx
                                           ; SOURCE LINE # 181
003E 7E00        R     MOV     R6,#HIGH Sample_int
0040 7F00        R     MOV     R7,#LOW Sample_int
0042 120000      E     LCALL   _isr_2_StartEx
                                           ; SOURCE LINE # 184
0045 D2AF              SETB    EA
0047 9044F4            MOV     DPTR,#044F4H
004A 74FD              MOV     A,#0FDH
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
004D 22                RET     
             ; FUNCTION Init (END)

C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 15  

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
0000 120000      R     LCALL   Init
                                           ; SOURCE LINE # 197
0003 7F01              MOV     R7,#01H
0005 120000      E     LCALL   _AMux_1_FastSelect
                                           ; SOURCE LINE # 200
0008 900000      R     MOV     DPTR,#cradleSpeed
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
000D 900000      R     MOV     DPTR,#mobileSpeed
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0012 900000      R     MOV     DPTR,#cradleSpeed
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      E     LCALL   _PWM_1_WriteCompare1
                                           ; SOURCE LINE # 203
001A 900000      R     MOV     DPTR,#mobileSpeed
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 120000      E     LCALL   _PWM_1_WriteCompare2
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0022         ?C0013:
                                           ; SOURCE LINE # 213
0022 900000      R     MOV     DPTR,#phase
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 6401              XRL     A,#01H
002A 6003              JZ      $ + 5H
002C 020000      R     LJMP    ?C0021
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
002F 900000      R     MOV     DPTR,#V_Sample_MIN
0032 747F              MOV     A,#07FH
0034 F0                MOVX    @DPTR,A
0035 A3                INC     DPTR
0036 74FF              MOV     A,#0FFH
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
0039 900000      R     MOV     DPTR,#V_Sample_MAX
003C 7480              MOV     A,#080H
003E F0                MOVX    @DPTR,A
003F A3                INC     DPTR
0040 E4                CLR     A
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0042 900000      R     MOV     DPTR,#i
0045 E4                CLR     A
0046 F0                MOVX    @DPTR,A
0047 A3                INC     DPTR
0048 E4                CLR     A
0049 F0                MOVX    @DPTR,A
004A         ?C0015:
004A 900000      R     MOV     DPTR,#i
004D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 16  

004E FE                MOV     R6,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 C3                CLR     C
0053 EE                MOV     A,R6
0054 9402              SUBB    A,#02H
0056 501A              JNC     ?C0016
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0058 906471            MOV     DPTR,#06471H
005B 7401              MOV     A,#01H
005D F0                MOVX    @DPTR,A
005E         ?C0018:
                                           ; SOURCE LINE # 220
005E 906471            MOV     DPTR,#06471H
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 70F8              JNZ     ?C0018
0066         ?C0019:
                                           ; SOURCE LINE # 221
0066         ?C0017:
0066 900000      R     MOV     DPTR,#i
0069 E4                CLR     A
006A 75F001            MOV     B,#01H
006D 120000      E     LCALL   ?C?IILDX
0070 80D8              SJMP    ?C0015
0072         ?C0016:
                                           ; SOURCE LINE # 224
0072 900000      R     MOV     DPTR,#V_Sample_MIN
0075 E0                MOVX    A,@DPTR
0076 FE                MOV     R6,A
0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A AB07              MOV     R3,AR7
007C AA06              MOV     R2,AR6
007E EA                MOV     A,R2
007F 33                RLC     A
0080 95E0              SUBB    A,ACC
0082 F9                MOV     R1,A
0083 F8                MOV     R0,A
0084 900000      R     MOV     DPTR,#V_Sample_MAX
0087 E0                MOVX    A,@DPTR
0088 FE                MOV     R6,A
0089 A3                INC     DPTR
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C EE                MOV     A,R6
008D 33                RLC     A
008E 95E0              SUBB    A,ACC
0090 FD                MOV     R5,A
0091 FC                MOV     R4,A
0092 120000      E     LCALL   ?C?LSUB
0095 120000      E     LCALL   _ADC_DelSig_1_CountsTo_Volts
0098 900000      R     MOV     DPTR,#V_Sample_PP_float
009B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 227
009E 900000      R     MOV     DPTR,#V_Sample_PP_float
00A1 120000      E     LCALL   ?C?LLDXDATA
00A4 900000      R     MOV     DPTR,#soundCounter
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 17  

00A7 E0                MOVX    A,@DPTR
00A8 FB                MOV     R3,A
00A9 EB                MOV     A,R3
00AA 25E0              ADD     A,ACC
00AC 25E0              ADD     A,ACC
00AE 2400        R     ADD     A,#LOW soundArray
00B0 F582              MOV     DPL,A
00B2 E4                CLR     A
00B3 3400        R     ADDC    A,#HIGH soundArray
00B5 F583              MOV     DPH,A
00B7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 228
00BA 900000      R     MOV     DPTR,#soundCounter
00BD E0                MOVX    A,@DPTR
00BE 04                INC     A
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
00C0 900000      R     MOV     DPTR,#soundCounter
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 C3                CLR     C
00C7 9414              SUBB    A,#014H
00C9 5003              JNC     $ + 5H
00CB 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
00CE 900000      R     MOV     DPTR,#phase
00D1 7402              MOV     A,#02H
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
00D4 900000      R     MOV     DPTR,#soundCounter
00D7 E4                CLR     A
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
00D9 020000      R     LJMP    ?C0013
00DC         ?C0021:
                                           ; SOURCE LINE # 245
00DC 900000      R     MOV     DPTR,#phase
00DF E0                MOVX    A,@DPTR
00E0 FF                MOV     R7,A
00E1 EF                MOV     A,R7
00E2 6402              XRL     A,#02H
00E4 7038              JNZ     ?C0023
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
00E6 7F00              MOV     R7,#00H
00E8 120000      E     LCALL   _AMux_1_FastSelect
                                           ; SOURCE LINE # 251
00EB 7F05              MOV     R7,#05H
00ED 7E00              MOV     R6,#00H
00EF 7D00              MOV     R5,#00H
00F1 7C00              MOV     R4,#00H
00F3 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 254
00F6 120000      E     LCALL   ADC_DelSig_1_GetResult16
00F9 900000      R     MOV     DPTR,#tempIn
00FC EE                MOV     A,R6
00FD F0                MOVX    @DPTR,A
00FE A3                INC     DPTR
00FF EF                MOV     A,R7
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 18  

0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0101 900000      R     MOV     DPTR,#tempIn
0104 E0                MOVX    A,@DPTR
0105 FE                MOV     R6,A
0106 A3                INC     DPTR
0107 E0                MOVX    A,@DPTR
0108 FF                MOV     R7,A
0109 120000      E     LCALL   _analyzeTemp
010C 900000      R     MOV     DPTR,#tempResult
010F EF                MOV     A,R7
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
0111 7F01              MOV     R7,#01H
0113 120000      E     LCALL   _AMux_1_FastSelect
                                           ; SOURCE LINE # 258
0116 900000      R     MOV     DPTR,#phase
0119 7403              MOV     A,#03H
011B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
011C 80BE              SJMP    ?C0021
011E         ?C0023:
                                           ; SOURCE LINE # 267
011E 900000      R     MOV     DPTR,#phase
0121 E0                MOVX    A,@DPTR
0122 FF                MOV     R7,A
0123 EF                MOV     A,R7
0124 6403              XRL     A,#03H
0126 7040              JNZ     ?C0025
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 272
0128 7B01              MOV     R3,#01H
012A 7A00        R     MOV     R2,#HIGH soundArray
012C 7900        R     MOV     R1,#LOW soundArray
012E 7D14              MOV     R5,#014H
0130 120000      E     LCALL   _analyzeSound
0133 900000      R     MOV     DPTR,#soundResult
0136 EF                MOV     A,R7
0137 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0138 900000      R     MOV     DPTR,#tempResult
013B E0                MOVX    A,@DPTR
013C FF                MOV     R7,A
013D 900000      R     MOV     DPTR,#zigSendArr
0140 EF                MOV     A,R7
0141 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
0142 900000      R     MOV     DPTR,#soundResult
0145 E0                MOVX    A,@DPTR
0146 FF                MOV     R7,A
0147 900000      R     MOV     DPTR,#zigSendArr+01H
014A EF                MOV     A,R7
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
014C 7B01              MOV     R3,#01H
014E 7A00        R     MOV     R2,#HIGH zigSendArr
0150 7900        R     MOV     R1,#LOW zigSendArr
0152 7D02              MOV     R5,#02H
0154 120000      E     LCALL   _zigbee_write_payload_TXfifo
                                           ; SOURCE LINE # 282
0157 120000      E     LCALL   zigbee_transmit_TXfifo
                                           ; SOURCE LINE # 284
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 19  

015A 900000      R     MOV     DPTR,#shutDownCounter
015D E0                MOVX    A,@DPTR
015E 04                INC     A
015F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
0160 900000      R     MOV     DPTR,#phase
0163 7401              MOV     A,#01H
0165 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
0166 80B6              SJMP    ?C0023
0168         ?C0025:
                                           ; SOURCE LINE # 299
0168 900000      R     MOV     DPTR,#phase
016B E0                MOVX    A,@DPTR
016C FF                MOV     R7,A
016D EF                MOV     A,R7
016E 6401              XRL     A,#01H
0170 6003              JZ      $ + 5H
0172 020000      R     LJMP    ?C0013
0175 900000      R     MOV     DPTR,#shutDownCounter
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A EF                MOV     A,R7
017B C3                CLR     C
017C 940A              SUBB    A,#0AH
017E 5003              JNC     $ + 5H
0180 020000      R     LJMP    ?C0013
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 302
0183 900000      R     MOV     DPTR,#cradleSpeed
0186 E4                CLR     A
0187 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
0188 900000      R     MOV     DPTR,#mobileSpeed
018B E4                CLR     A
018C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
018D 900000      R     MOV     DPTR,#cradleSpeed
0190 E0                MOVX    A,@DPTR
0191 FF                MOV     R7,A
0192 120000      E     LCALL   _PWM_1_WriteCompare1
                                           ; SOURCE LINE # 305
0195 900000      R     MOV     DPTR,#mobileSpeed
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A 120000      E     LCALL   _PWM_1_WriteCompare2
                                           ; SOURCE LINE # 310
019D 80C9              SJMP    ?C0025
019F 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1154    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    111       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.51   MAIN                                                                  12/19/2013 21:53:02 PAGE 20  

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
