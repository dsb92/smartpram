C51 COMPILER V9.51   SPI_INT                                                               12/19/2013 21:53:15 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE SPI_INT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\SPI_INT.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\SPI_INT.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\SPI_INT.lst) CD DB NOI
                    -P OT(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\SPI_INT.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: SPI_INT.c
   3          * Version 2.40
   4          *
   5          * Description:
   6          *  This file provides all Interrupt Service Routine (ISR) for the SPI Master
   7          *  component.
   8          *
   9          * Note:
  10          *  None.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "SPI_PVT.h"
  20          
  21          /* User code required at start of ISR */
  22          /* `#START SPI_ISR_START_DEF` */
  23          
  24          /* `#END` */
  25          
  26          
  27          /*******************************************************************************
  28          * Function Name: SPI_TX_ISR
  29          ********************************************************************************
  30          *
  31          * Summary:
  32          *  Interrupt Service Routine for TX portion of the SPI Master.
  33          *
  34          * Parameters:
  35          *  None.
  36          *
  37          * Return:
  38          *  None.
  39          *
  40          * Global variables:
  41          *  SPI_txBufferWrite - used for the account of the bytes which
  42          *  have been written down in the TX software buffer.
  43          *  SPI_txBufferRead - used for the account of the bytes which
  44          *  have been read from the TX software buffer, modified when exist data to
  45          *  sending and FIFO Not Full.
  46          *  SPI_txBuffer[SPI_TX_BUFFER_SIZE] - used to store
  47          *  data to sending.
  48          *  All described above Global variables are used when Software Buffer is used.
  49          *
  50          *******************************************************************************/
  51          CY_ISR(SPI_TX_ISR)
  52          {
  53   1          #if(SPI_TX_SOFTWARE_BUF_ENABLED)
C51 COMPILER V9.51   SPI_INT                                                               12/19/2013 21:53:15 PAGE 2   

                      uint8 tmpStatus;
                  #endif /* (SPI_TX_SOFTWARE_BUF_ENABLED) */
  56   1      
  57   1          /* User code required at start of ISR */
  58   1          /* `#START SPI_TX_ISR_START` */
  59   1      
  60   1          /* `#END` */
  61   1      
  62   1          #if(SPI_TX_SOFTWARE_BUF_ENABLED)
                      /* Check if TX data buffer is not empty and there is space in TX FIFO */
                      while(SPI_txBufferRead != SPI_txBufferWrite)
                      {
                          tmpStatus = SPI_GET_STATUS_TX(SPI_swStatusTx);
                          SPI_swStatusTx = tmpStatus;
              
                          if(0u != (SPI_swStatusTx & SPI_STS_TX_FIFO_NOT_FULL))
                          {
                              if(0u == SPI_txBufferFull)
                              {
                                 SPI_txBufferRead++;
              
                                  if(SPI_txBufferRead >= SPI_TX_BUFFER_SIZE)
                                  {
                                      SPI_txBufferRead = 0u;
                                  }
                              }
                              else
                              {
                                  SPI_txBufferFull = 0u;
                              }
              
                              /* Move data from the Buffer to the FIFO */
                              CY_SET_REG8(SPI_TXDATA_PTR,
                                  SPI_txBuffer[SPI_txBufferRead]);
                          }
                          else
                          {
                              break;
                          }
                      }
              
                      if(SPI_txBufferRead == SPI_txBufferWrite)
                      {
                          /* TX Buffer is EMPTY: disable interrupt on TX NOT FULL */
                          SPI_TX_STATUS_MASK_REG &= ((uint8) ~SPI_STS_TX_FIFO_NOT_FULL);
                      }
              
                  #endif /* (SPI_TX_SOFTWARE_BUF_ENABLED) */
 102   1      
 103   1          /* User code required at end of ISR (Optional) */
 104   1          /* `#START SPI_TX_ISR_END` */
 105   1      
 106   1          /* `#END` */
 107   1      }
 108          
 109          
 110          /*******************************************************************************
 111          * Function Name: SPI_RX_ISR
 112          ********************************************************************************
 113          *
 114          * Summary:
 115          *  Interrupt Service Routine for RX portion of the SPI Master.
C51 COMPILER V9.51   SPI_INT                                                               12/19/2013 21:53:15 PAGE 3   

 116          *
 117          * Parameters:
 118          *  None.
 119          *
 120          * Return:
 121          *  None.
 122          *
 123          * Global variables:
 124          *  SPI_rxBufferWrite - used for the account of the bytes which
 125          *  have been written down in the RX software buffer modified when FIFO contains
 126          *  new data.
 127          *  SPI_rxBufferRead - used for the account of the bytes which
 128          *  have been read from the RX software buffer, modified when overflow occurred.
 129          *  SPI_rxBuffer[SPI_RX_BUFFER_SIZE] - used to store
 130          *  received data, modified when FIFO contains new data.
 131          *  All described above Global variables are used when Software Buffer is used.
 132          *
 133          *******************************************************************************/
 134          CY_ISR(SPI_RX_ISR)
 135          {
 136   1          #if(SPI_RX_SOFTWARE_BUF_ENABLED)
                      uint8 tmpStatus;
                      uint8 rxData;
                  #endif /* (SPI_RX_SOFTWARE_BUF_ENABLED) */
 140   1      
 141   1          /* User code required at start of ISR */
 142   1          /* `#START SPI_RX_ISR_START` */
 143   1      
 144   1          /* `#END` */
 145   1      
 146   1          #if(SPI_RX_SOFTWARE_BUF_ENABLED)
              
                      tmpStatus = SPI_GET_STATUS_RX(SPI_swStatusRx);
                      SPI_swStatusRx = tmpStatus;
              
                      /* Check if RX data FIFO has some data to be moved into the RX Buffer */
                      while(0u != (SPI_swStatusRx & SPI_STS_RX_FIFO_NOT_EMPTY))
                      {
                          rxData = CY_GET_REG8(SPI_RXDATA_PTR);
              
                          /* Set next pointer. */
                          SPI_rxBufferWrite++;
                          if(SPI_rxBufferWrite >= SPI_RX_BUFFER_SIZE)
                          {
                              SPI_rxBufferWrite = 0u;
                          }
              
                          if(SPI_rxBufferWrite == SPI_rxBufferRead)
                          {
                              SPI_rxBufferRead++;
                              if(SPI_rxBufferRead >= SPI_RX_BUFFER_SIZE)
                              {
                                  SPI_rxBufferRead = 0u;
                              }
              
                              SPI_rxBufferFull = 1u;
                          }
              
                          /* Move data from the FIFO to the Buffer */
                          SPI_rxBuffer[SPI_rxBufferWrite] = rxData;
              
                          tmpStatus = SPI_GET_STATUS_RX(SPI_swStatusRx);
C51 COMPILER V9.51   SPI_INT                                                               12/19/2013 21:53:15 PAGE 4   

                          SPI_swStatusRx = tmpStatus;
                      }
              
                  #endif /* (SPI_RX_SOFTWARE_BUF_ENABLED) */
 182   1      
 183   1          /* User code required at end of ISR (Optional) */
 184   1          /* `#START SPI_RX_ISR_END` */
 185   1      
 186   1          /* `#END` */
 187   1      }
 188          
 189          /* [] END OF FILE */
C51 COMPILER V9.51   SPI_INT                                                               12/19/2013 21:53:15 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION SPI_TX_ISR (BEGIN)
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 107
0000 32                RETI    
             ; FUNCTION SPI_TX_ISR (END)

             ; FUNCTION SPI_RX_ISR (BEGIN)
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 187
0000 32                RETI    
             ; FUNCTION SPI_RX_ISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =      2    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
